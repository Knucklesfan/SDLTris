<background>
	<head>
		<title>Credits</title>
		<version>1.0</version>
		<creator>Knuxfan</creator>
		<!--This is an example of a classic theme ported to the modern engine. Of course, it's still missing some features.-->
		<!--Eventually, there will be an automatic script to convert SDLTris features to SDLTrisRewritten.-->
		<music visualize="false">
			<title>Long Train Runnin'</title>
			<creator>The Doobie Brothers</creator>
			<filename>longtrain.mp3</filename>
		</music>
	</head>
	<layers>
		<!--depths are handled a 0-inf scale, with 0 being the furthest back, and preceeding numbers going up.-->
		<layer type="background" depth="0">
			<filename>00.png</filename>
		</layer>
<layer type="bg2d" depth="2">
			<textures>
				<texture> <!--The texture to use-->
					<path>clouds.png</path>
				</texture>
			</textures>
			<shader> <!--Shader that the BG uses-->
				<vertex>vertex_unlit.glsl</vertex>
				<fragment>fragment_unlit.glsl</fragment>
			</shader>
			<transform> <!--The initial transform of the object-->
			<!--This transform object HAS to be present in the bg2d type or the game will crash!-->
				<position>
					<x>0</x>
					<y>0</y>
					<z>0</z>
				</position>
				<rotation>
					<x>100</x>
					<y>0</y>
					<z>0</z>
				</rotation>
				<scale>
					<x>100</x>
					<y>100</y>
					<z>1</z>
				</scale>
				<shader> <!--Every transform also has 3 extra shader properties that are passed to both the fragment and vertex shaders for you to use for whatever you want. They are also animated too!-->
					<x>0</x>
					<y>0</y>
					<z>0</z>
				</shader>

			</transform>
			
			<animation> <!--First, start by declaring the layer's animation-->
				<action frame="50" interpolation="LINEAR"> <!--This frame should take 2 seconds to reach. (20/10=2)-->
					<transform>
					<position>
						<x>0</x>
						<y>-20</y>
						<z>0</z>
					</position>

					</transform>
				</action>
			</animation>
		</layer>

		<layer type="bg2d" depth="1">
			<textures>
				<texture> <!--The texture to use-->
					<path>dancin.png</path>
				</texture>
			</textures>
			<shader> <!--Shader that the BG uses-->
				<vertex>vertex_unlit.glsl</vertex>
				<fragment>fragment_animation.glsl</fragment>
			</shader>
			<transform> <!--The initial transform of the object-->
			<!--This transform object HAS to be present in the bg2d type or the game will crash!-->
				<position>
					<x>-3</x>
					<y>0</y>
					<z>0</z>
				</position>
				<rotation>
					<x>-180</x>
					<y>0</y>
					<z>0</z>
				</rotation>
				<scale>
					<x>1</x>
					<y>1</y>
					<z>1</z>
				</scale>
				<shader> <!--Every transform also has 3 extra shader properties that are passed to both the fragment and vertex shaders for you to use for whatever you want. They are also animated too!-->
					<x>0</x>
					<y>0</y>
					<z>0</z>
				</shader>
			</transform>
			
			<!--And so, It begins.-->
			<!--The SDLTris engine, or as I have started calling it: QuadEngine now supports animations!-->
			<!--These animations were inspired by engines like Unity, with it's linear node editor and the ability for animations to effect any object's properties-->
			<!--In this animation engine, you can find very basic support for 3 different types of interpolation, the ability to place frames and the ability to adjust the frame timing.-->
			<!--Right now its gonna take a LOT of math to get meaningful results, but hey, at least it works!-->
			<animation> <!--First, start by declaring the layer's animation-->
				<action frame="10" interpolation="LINEAR"><!--Actions are what occurs linearly in the animation. Frame numbers MUST be specified, as that determines the length of a keyframe.-->
					<transform> <!--This tells the action that the action to be committed is a transform: i.e, the action will translate directly the value needed to a vec3-->
					<!--TRANSFORMS ONLY WORK WITH VEC3s! Any 3D vector can be changed, this could mean position, rotation, scaling, hell even more exotic things like skewing or whatnot is allowed-->
					<!--This does have one downside: It only works with objects and has no support for changing shader values-->
					<!--You will soon be allowed to have multiple, its just right now I'm only allowing one of each type for the time being. Eventually, these will be sorted and generate their own animations.-->
					<!--If to compare this engine to Unity, think of these as each row of these things (i have no idea what they are called nor care)-->
					<!--Basically it's this [https://docs.unity3d.com/uploads/Main/AnimationEditorUnfoldedProperty.png]-->
						<position> <!--Tells it to modify the position value-->
							<x>-3</x>
							<y>0</y>
							<z>0</z>
						</position>

						<!--Since it is omitted, scale will not be touched!-->
					</transform>
				</action> <!--I aint reading allat ðŸ’€ðŸ’€ðŸ’€-->
				<action frame="80" interpolation="LINEAR"> <!--This frame should take 2 seconds to reach. (20/10=2)-->
					<transform>
						<position> <!--Tells it to modify the position value-->
							<x>-3</x>
							<y>0</y>
							<z>0</z>
						</position>
						<rotation> <!--Tells it to modify the position value-->
							<x>-180</x>
							<y>0</y>
							<z>-360</z>
						</rotation>

						<!--notice how rotation isn't touched, thus only will it move *after* this frame, because we do touch it in the next one!-->
						<!--This is a complaint I've always had with animating software, and although I am no animator, I've always found it annoying that it tries to interpolate values that aren't immediately needed-->
						<!--If i get enough outcry about this, I would rework this, but for a temporary solution, you can just calculate the midpoint between the the points, and find where on that graph this point is-->
						<!--Might implement this as a feature in the engine itself, we'll see-->
					</transform>
				</action>

			</animation>
		</layer>
		<!--Legacy backgrounds function identical to the original game's backgrounds, including paralax and whatnot (paralax yet to be implemented).-->
		<!--I DO NOT recommend using legacy backgrounds. They are merely just a direct reimplementation of the original system to ensure compatibility and easy porting. -->
		<!--!!!PLEASE DO NOT USE FOR A REAL BG PACK!!!-->
	</layers>
	<!--Backgrounds also now support post processing! Although optional, these effects are shaders that can be overlayed on top of the background, allowing you to do some neat stuff. These work similarly to shader layers.-->
	<!-- <framebuffer>
			<textures>
				<texture>
					<path>bayer4tile8.png</path>
				</texture>
			</textures>
			<shader>
				<vertex>vertex.glsl</vertex>
				<fragment>postproc.glsl</fragment>
			</shader>
	</framebuffer> -->
</background>
