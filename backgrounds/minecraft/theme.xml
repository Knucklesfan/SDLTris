<background>
	<head>
		<title>Minecraft</title>
		<version>1.0</version>
		<creator>Knuxfan</creator>
		<music visualize="false">
			<title>Strad</title>
			<creator>C418</creator>
			<filename>strad.mp3</filename>
		</music>
	</head>
	<layers>
		<!--depths are handled a 0-inf scale, with 0 being the furthest back, and preceeding numbers going up.-->
		<layer type="background" depth="0">
			<filename>00.png</filename>
		</layer>
<layer type="bg2d" depth="2">
			<textures>
				<texture> <!--The texture to use-->
					<path>grass.png</path>
				</texture>
			</textures>
			<shader> <!--Shader that the BG uses-->
				<vertex>vertex_unlit.glsl</vertex>
				<fragment>fragment_unlit.glsl</fragment>
			</shader>
			<transform> <!--The initial transform of the object-->
			<!--This transform object HAS to be present in the bg2d type or the game will crash!-->
				<position>
					<x>0</x>
					<y>0</y>
					<z>-20</z>
				</position>
				<rotation>
					<x>91</x>
					<y>0</y>
					<z>0</z>
				</rotation>
				<scale>
					<x>100</x>
					<y>100</y>
					<z>1</z>
				</scale>
				<selfpos> <!--The self position is the position relative to the plane itself, applied after scaling/rotation. This is completely optional, but I find it makes scaling water and stuff a lot easier!-->
					<x>0</x>
					<y>0</y>
					<z>0</z>
				</selfpos>

			</transform>
			
			<animation> <!--First, start by declaring the layer's animation-->
				<action frame="500" interpolation="LINEAR"> <!--This frame should take 2 seconds to reach. (20/10=2)-->
					<transform>
					<selfpos>
						<x>0</x>
						<y>0.5</y>
						<z>0</z>
					</selfpos>

					</transform>
				</action>
			</animation>
		</layer>
<layer type="bg2d" depth="3">
			<textures>
				<texture> <!--The texture to use-->
					<path>clouds.png</path>
				</texture>
			</textures>
			<shader> <!--Shader that the BG uses-->
				<vertex>vertex_unlit.glsl</vertex>
				<fragment>fragment_cloud.glsl</fragment>
			</shader>
			<transform> <!--The initial transform of the object-->
			<!--This transform object HAS to be present in the bg2d type or the game will crash!-->
				<position>
					<x>0</x>
					<y>0</y>
					<z>20</z>
				</position>
				<rotation>
					<x>-85</x>
					<y>0</y>
					<z>0</z>
				</rotation>
				<scale>
					<x>100</x>
					<y>100</y>
					<z>1</z>
				</scale>
				<selfpos> <!--The self position is the position relative to the plane itself, applied after scaling/rotation. This is completely optional, but I find it makes scaling water and stuff a lot easier!-->
					<x>0</x>
					<y>0</y>
					<z>0</z>
				</selfpos>

			</transform>
			<animation> <!--First, start by declaring the layer's animation-->
			<action frame="1000" interpolation="LINEAR"> <!--This frame should take 2 seconds to reach. (20/10=2)-->
			<transform>
			<selfpos>
			<x>0</x>
		<y>-0.5</y>
		<z>0</z>
		</selfpos>

		</transform>
		</action>
		</animation>

		</layer>

	</layers>
	<!--Backgrounds also now support post processing! Although optional, these effects are shaders that can be overlayed on top of the background, allowing you to do some neat stuff. These work similarly to shader layers.-->
	<!-- <framebuffer>
			<textures>
				<texture>
					<path>bayer4tile8.png</path>
				</texture>
			</textures>
			<shader>
				<vertex>vertex.glsl</vertex>
				<fragment>postproc.glsl</fragment>
			</shader>
	</framebuffer> -->
	<blockpack> <!--This replaces the blocks in the background with the blocks supplied
	WARNING: ensure you keep a good resolution, as they only render 16x16!-->
		<block>blockpack/diamond_block.png</block>
		<block>blockpack/dirt.png</block>
		<block>blockpack/grass_block_side.png</block>
		<block>blockpack/tnt_side.png</block>
		<block>blockpack/gold_block.png</block>
		<block>blockpack/spruce_log.png</block>
		<block>blockpack/spruce_planks.png</block>
	</blockpack>
</background>
